services:
  django:
    build:
      context: .
      dockerfile: compose/production/django/Dockerfile
    image: django-oidc-provider__django_production
    command: /start.sh
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    env_file:
      - .envs/.production/.django
      - .envs/.production/.postgres
      - .envs/.production/.core
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-10s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-10s}

  celeryworker:
    image: django-oidc-provider__django_production
    command: /start-celeryworker.sh
    depends_on:
      - django
      - redis
    restart: unless-stopped
    env_file:
      - .envs/.production/.django
      - .envs/.production/.postgres
    networks:
      - backend

  celerybeat:
    image: django-oidc-provider__django_production
    command: /start-celerybeat.sh
    depends_on:
      - django
      - redis
    restart: unless-stopped
    env_file:
      - .envs/.production/.django
      - .envs/.production/.postgres
    networks:
      - backend

  celeryflower:
    image: django-oidc-provider__django_production
    command: /start-celeryflower.sh
    depends_on:
      - django
      - redis
    env_file:
      - .envs/.production/.django
      - .envs/.production/.postgres
    networks:
      - backend

  postgres:
    image: docker.io/postgres:15
    restart: unless-stopped
    env_file:
      - .envs/.production/.postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: docker.io/redis:7
    restart: unless-stopped
    volumes:
      - production_redis_data:/data
    networks:
      - backend

  nginx:
    image: docker.io/nginx:1.25
    ports:
      - "80:80"
      - "443:443"
      - "5555:5555"
    restart: unless-stopped
    volumes:
      - ./compose/production/nginx/nginx.conf:/etc/nginx/templates/default.conf.template
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    env_file:
      - .envs/.production/.core
      - .envs/.production/.django
    depends_on:
      - django
      - celeryflower
    networks:
      - frontend
      - backend
    command: /bin/bash -c "envsubst '$${DOMAIN}' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    networks:
      - frontend
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  production_postgres_data:
  production_redis_data:

networks:
  frontend:
    driver: bridge

  backend:
    driver: bridge
