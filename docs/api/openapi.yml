openapi: 3.0.3
info:
  title: Django OIDC Provider API
  description: |
    OAuth2 and OpenID Connect (OIDC) Identity Provider API

    This API provides OAuth2/OIDC endpoints for authentication and user information retrieval.

    ## Authentication Flow
    1. Redirect user to `/users/authorize/` for authorization
    2. Exchange authorization code for tokens at `/api/users/token/`
    3. Use access token to access protected resources
    4. Refresh tokens using `/api/users/token/refresh/`

    ## OIDC Features
    - ID Token generation for OpenID Connect
    - Nonce validation for replay attack prevention
    - PKCE support for public clients
    - Discovery endpoint for OIDC metadata
    - JWKS endpoint for public key distribution

    ## Standards Compliance
    - RFC 6749 - OAuth 2.0 Authorization Framework
    - RFC 6750 - OAuth 2.0 Bearer Token Usage
    - OpenID Connect Core 1.0
    - RFC 7636 - PKCE (Proof Key for Code Exchange)
  version: 1.0.0
  contact:
    name: Django OIDC Provider
    url: https://github.com/dakshesh14/django-oidc-provider
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Local development server
  - url: https://your-domain.com
    description: Production server

paths:
  /users/authorize/:
    get:
      summary: OAuth2 Authorization Endpoint
      description: |
        Initiates the OAuth2 authorization code flow with OIDC support. Redirects user to login if not authenticated,
        then returns authorization code to the client's redirect URI.

        Supports PKCE (Proof Key for Code Exchange) for enhanced security.
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: The client identifier
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
          description: The callback URI to redirect to after authorization
        - name: scope
          in: query
          required: false
          schema:
            type: string
            default: "openid"
          description: Space-separated list of scopes (e.g., "openid email profile")
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: CSRF protection parameter
        - name: response_type
          in: query
          required: false
          schema:
            type: string
            enum: [code]
            default: code
          description: Must be "code" for authorization code flow
        - name: nonce
          in: query
          required: false
          schema:
            type: string
          description: OIDC nonce parameter for replay attack prevention (required when openid scope is present)
        - name: code_challenge
          in: query
          required: false
          schema:
            type: string
          description: PKCE code challenge (required for public clients)
        - name: code_challenge_method
          in: query
          required: false
          schema:
            type: string
            enum: [S256, plain]
            default: S256
          description: PKCE code challenge method (S256 recommended)
      responses:
        "302":
          description: Redirect to client callback URI with authorization code or error
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: |
                Success: {redirect_uri}?code={auth_code}&state={state}
                Error: {redirect_uri}?error={error_code}&state={state}
        "400":
          description: Invalid request parameters
      tags:
        - OAuth2

  /api/users/token/:
    post:
      summary: Token Exchange Endpoint
      description: |
        Exchanges an authorization code for access and refresh tokens.
        This is part of the OAuth2 authorization code flow.

        When the 'openid' scope is present, an ID token is also returned.
        PKCE code_verifier validation is performed if code_challenge was used.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - client_id
                - client_secret
                - code
                - redirect_uri
                - grant_type
              properties:
                client_id:
                  type: string
                  description: The client identifier
                client_secret:
                  type: string
                  description: The client secret
                code:
                  type: string
                  description: The authorization code received from /users/authorize/
                redirect_uri:
                  type: string
                  format: uri
                  description: The same redirect URI used in the authorization request
                grant_type:
                  type: string
                  enum: [authorization_code]
                  description: Must be "authorization_code"
                code_verifier:
                  type: string
                  description: PKCE code verifier (required if code_challenge was used)
            example:
              client_id: "your_client_id"
              client_secret: "your_client_secret"
              code: "auth_code_from_callback"
              redirect_uri: "https://your-app.com/callback"
              grant_type: "authorization_code"
              code_verifier: "your_code_verifier"
      responses:
        "200":
          description: Token exchange successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: JWT access token
                  token_type:
                    type: string
                    enum: [bearer]
                    description: Token type (always "bearer")
                  expires_in:
                    type: integer
                    description: Access token lifetime in seconds
                  refresh_token:
                    type: string
                    description: Refresh token for obtaining new access tokens
                  id_token:
                    type: string
                    description: JWT ID token (returned when openid scope is present)
              example:
                access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                token_type: "bearer"
                expires_in: 900
                refresh_token: "random_refresh_token_string"
                id_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "400":
          description: Invalid request or expired/invalid authorization code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                invalid_client:
                  value:
                    error: "invalid_client"
                invalid_grant:
                  value:
                    error: "invalid_grant"
                    error_description: "Invalid or expired authorization code"
                invalid_request:
                  value:
                    error: "invalid_request"
                    error_description: "Missing code_verifier for PKCE"
      tags:
        - OAuth2

  /api/users/token/refresh/:
    post:
      summary: Refresh Token Endpoint
      description: |
        Exchanges a refresh token for a new access token and refresh token.
        The old refresh token is invalidated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: The refresh token
            example:
              refresh_token: "your_refresh_token"
      responses:
        "200":
          description: Token refresh successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: New JWT access token
                  token_type:
                    type: string
                    enum: [bearer]
                  expires_in:
                    type: integer
                    description: Access token lifetime in seconds
                  refresh_token:
                    type: string
                    description: New refresh token
              example:
                access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                token_type: "bearer"
                expires_in: 900
                refresh_token: "new_refresh_token_string"
        "400":
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                invalid_grant:
                  value:
                    error: "invalid_grant"
                    error_description: "Invalid or expired refresh token"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "user_not_found"
      tags:
        - OAuth2

  /api/users/userinfo/:
    get:
      summary: User Info Endpoint
      description: |
        Returns user information based on the access token and granted scopes.
        This is the OpenID Connect UserInfo endpoint.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub:
                    type: string
                    description: Subject identifier (user ID)
                  email:
                    type: string
                    format: email
                    description: User's email address (if email scope granted)
                  email_verified:
                    type: boolean
                    description: Whether email is verified (if email scope granted)
                  name:
                    type: string
                    description: Username (if profile scope granted)
                  given_name:
                    type: string
                    description: First name (if profile scope granted)
                  family_name:
                    type: string
                    description: Last name (if profile scope granted)
                  profile_picture:
                    type: string
                    format: uri
                    nullable: true
                    description: Profile picture URL (if profile scope granted)
              example:
                sub: "550e8400-e29b-41d4-a716-446655440000"
                email: "user@example.com"
                email_verified: true
                name: "johndoe"
                given_name: "John"
                family_name: "Doe"
                profile_picture: "https://example.com/avatar.jpg"
        "401":
          description: Invalid, expired, or missing access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                missing_token:
                  value:
                    error: "missing_token"
                token_expired:
                  value:
                    error: "token_expired"
                invalid_token:
                  value:
                    error: "invalid_token"
                token_revoked:
                  value:
                    error: "token_revoked"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "user_not_found"
      tags:
        - OpenID Connect

  /api/users/logout/:
    post:
      summary: Logout Endpoint
      description: |
        Revokes the provided access token by adding it to a blacklist.
        The token will be invalid for future requests.
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Logout successful, token revoked
        "400":
          description: Invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                missing_token:
                  value:
                    error: "missing_token"
                invalid_token:
                  value:
                    error: "invalid_token"
      tags:
        - OAuth2

  /.well-known/openid-configuration:
    get:
      summary: OIDC Discovery Endpoint
      description: |
        Returns OpenID Connect discovery metadata.
        This endpoint provides information about the OIDC provider's capabilities and endpoints.
      responses:
        "200":
          description: OIDC discovery metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    format: uri
                    description: The issuer identifier
                  authorization_endpoint:
                    type: string
                    format: uri
                    description: Authorization endpoint URL
                  token_endpoint:
                    type: string
                    format: uri
                    description: Token endpoint URL
                  userinfo_endpoint:
                    type: string
                    format: uri
                    description: UserInfo endpoint URL
                  jwks_uri:
                    type: string
                    format: uri
                    description: JWKS endpoint URL
                  response_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported response types
                  subject_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported subject types
                  id_token_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                    description: Supported ID token signing algorithms
                  scopes_supported:
                    type: array
                    items:
                      type: string
                    description: Supported scopes
                  claims_supported:
                    type: array
                    items:
                      type: string
                    description: Supported claims
                  grant_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported grant types
                  token_endpoint_auth_methods_supported:
                    type: array
                    items:
                      type: string
                    description: Supported token endpoint authentication methods
                  code_challenge_methods_supported:
                    type: array
                    items:
                      type: string
                    description: Supported PKCE code challenge methods
              example:
                issuer: "https://your-domain.com"
                authorization_endpoint: "https://your-domain.com/users/authorize/"
                token_endpoint: "https://your-domain.com/api/users/token/"
                userinfo_endpoint: "https://your-domain.com/api/users/userinfo/"
                jwks_uri: "https://your-domain.com/api/users/jwks/"
                response_types_supported: ["code"]
                subject_types_supported: ["public"]
                id_token_signing_alg_values_supported: ["HS256"]
                scopes_supported: ["openid", "email", "profile"]
                claims_supported:
                  [
                    "sub",
                    "email",
                    "email_verified",
                    "name",
                    "given_name",
                    "family_name",
                  ]
                grant_types_supported: ["authorization_code", "refresh_token"]
                token_endpoint_auth_methods_supported: ["client_secret_post"]
                code_challenge_methods_supported: ["plain", "S256"]
      tags:
        - OpenID Connect

  /api/users/jwks/:
    get:
      summary: JWKS Endpoint
      description: |
        Returns JSON Web Key Set (JWKS) for JWT validation.
        Currently supports HS256 signing algorithm.
      responses:
        "200":
          description: JSON Web Key Set
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kty:
                          type: string
                          description: Key type
                        use:
                          type: string
                          description: Key use
                        alg:
                          type: string
                          description: Algorithm
                        kid:
                          type: string
                          description: Key ID
              example:
                keys:
                  - kty: "oct"
                    use: "sig"
                    alg: "HS256"
                    kid: "default"
      tags:
        - OpenID Connect

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token obtained from the token endpoint

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error code
        error_description:
          type: string
          description: Human-readable error description
      required:
        - error
      example:
        error: "invalid_request"
        error_description: "Missing required parameter"

tags:
  - name: OAuth2
    description: OAuth2 authorization and token management endpoints
  - name: OpenID Connect
    description: OpenID Connect user information and discovery endpoints
