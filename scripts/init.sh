#!/usr/bin/env bash

set -e

echo "--------------------------------------------------"
echo "Deployment Environment Initializer"
echo "--------------------------------------------------"

read -p "Have you read docs/deployment.md? [y/N] " confirm
[[ "$confirm" =~ ^[Yy]$ ]] || exit 1

# ------------------------------------------------------------------------------
#  SETUP DIRECTORY
# ------------------------------------------------------------------------------
mkdir -p .envs/.production

# ------------------------------------------------------------------------------
#  UTILITY FUNCTIONS
# ------------------------------------------------------------------------------
generate_secret() {
  openssl rand -hex 64
}
generate_password() {
  openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | head -c 40
}
confirm_overwrite() {
  local filepath=$1
  if [[ -f "$filepath" ]]; then
    read -rp "⚠️  $filepath exists. Overwrite? [y/N]: " response
    [[ "$response" =~ ^[Yy]$ ]] || return 1
  fi
  return 0
}

# ------------------------------------------------------------------------------
#  AUTO-GENERATED VALUES
# ------------------------------------------------------------------------------
DJANGO_SECRET_KEY=$(generate_secret)
CELERY_FLOWER_USER=$(generate_secret)
CELERY_FLOWER_PASSWORD=$(generate_secret)

# ------------------------------------------------------------------------------
#  USER INPUT
# ------------------------------------------------------------------------------
echo "[Django Configuration]"
read -p "DJANGO_ALLOWED_HOSTS (.example.com,localhost): " ALLOWED_HOSTS
read -p "DJANGO_SERVER_EMAIL (optional): " DJANGO_SERVER_EMAIL
read -p "DJANGO_ADMIN_URL (default: admin): " DJANGO_ADMIN_URL
DJANGO_ADMIN_URL=${DJANGO_ADMIN_URL:-admin}

echo "[Core Configuration]"
read -p "DOMAIN (example.com): " DOMAIN
read -p "EMAIL_FOR_SSL (your-name@example.com): " EMAIL_FOR_SSL
ISSUER_URL="http://${DOMAIN}"

echo "[Email Configuration]"
read -p "MAILGUN_API_KEY (key-...): " MAILGUN_API_KEY
read -p "MAILGUN_DOMAIN (example.mailgun.org): " MAILGUN_DOMAIN
read -p "DJANGO_DEFAULT_FROM_EMAIL (noreply@example.com): " DJANGO_DEFAULT_FROM_EMAIL

echo "[AWS S3 Configuration]"
read -p "AWS Access Key ID: " DJANGO_AWS_ACCESS_KEY_ID
read -p "AWS Secret Access Key: " DJANGO_AWS_SECRET_ACCESS_KEY
read -p "AWS S3 Bucket Name: " DJANGO_AWS_STORAGE_BUCKET_NAME

# ------------------------------------------------------------------------------
#  DATABASE CONFIGURATION (AUTOGENERATED)
# ------------------------------------------------------------------------------
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_DB=dj-oidc-provider
POSTGRES_USER=$(generate_password)
POSTGRES_PASSWORD=$(generate_password)
DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

# ------------------------------------------------------------------------------
#  WRITE FILES
# ------------------------------------------------------------------------------
DIR=$(dirname "$0")

if confirm_overwrite ".envs/.production/.django"; then
  echo "→ Rendering .envs/.production/.django"
  "$DIR/render_template.sh" "$DIR/templates/.django.template" .envs/.production/.django \
    DJANGO_SECRET_KEY="$DJANGO_SECRET_KEY" \
    DJANGO_ALLOWED_HOSTS="$ALLOWED_HOSTS" \
    DJANGO_SERVER_EMAIL="$DJANGO_SERVER_EMAIL" \
    DJANGO_ADMIN_URL="$DJANGO_ADMIN_URL" \
    MAILGUN_API_KEY="$MAILGUN_API_KEY" \
    MAILGUN_DOMAIN="$MAILGUN_DOMAIN" \
    DJANGO_DEFAULT_FROM_EMAIL="$DJANGO_DEFAULT_FROM_EMAIL" \
    DJANGO_AWS_ACCESS_KEY_ID="$DJANGO_AWS_ACCESS_KEY_ID" \
    DJANGO_AWS_SECRET_ACCESS_KEY="$DJANGO_AWS_SECRET_ACCESS_KEY" \
    DJANGO_AWS_STORAGE_BUCKET_NAME="$DJANGO_AWS_STORAGE_BUCKET_NAME" \
    CELERY_FLOWER_USER="$CELERY_FLOWER_USER" \
    CELERY_FLOWER_PASSWORD="$CELERY_FLOWER_PASSWORD" \
    SSO_ISSUER_URL="$ISSUER_URL"
fi

if confirm_overwrite ".envs/.production/.postgres"; then
  echo "→ Rendering .envs/.production/.postgres"
  cat > .envs/.production/.postgres <<EOF
# PostgreSQL
POSTGRES_HOST=${POSTGRES_HOST}
POSTGRES_PORT=${POSTGRES_PORT}
POSTGRES_DB=${POSTGRES_DB}
POSTGRES_USER=${POSTGRES_USER}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
DATABASE_URL=${DATABASE_URL}
EOF
fi

if confirm_overwrite ".envs/.production/.core"; then
  echo "→ Rendering .envs/.production/.core"
  cat > .envs/.production/.core <<EOF
HEALTHCHECK_INTERVAL=30s
HEALTHCHECK_TIMEOUT=10s
HEALTHCHECK_RETRIES=3
HEALTHCHECK_START_PERIOD=10s

DOMAIN=${DOMAIN}
EMAIL_FOR_SSL=${EMAIL_FOR_SSL}
EOF
fi

# ------------------------------------------------------------------------------
#  DONE
# ------------------------------------------------------------------------------
echo ""
echo "✅ Environment files generated successfully!"
echo ""
echo "📁 Files created:"
[[ -f .envs/.production/.django ]] && echo "  • .envs/.production/.django"
[[ -f .envs/.production/.postgres ]] && echo "  • .envs/.production/.postgres"
[[ -f .envs/.production/.core ]] && echo "  • .envs/.production/.core"
echo ""
echo "🚀 Next steps:"
echo "  → Run:     make deploy"
echo "  → Then:    make migrate"
